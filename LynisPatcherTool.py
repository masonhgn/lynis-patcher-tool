#    ***********************************************************************************
#    Function Name: runCommand
#    Description: Attempts to run whatever argument is passed in as a linux command.
#    Params:
#        - cmd: the command you want to run
#    Returns:
#        - True if the command is successfully run
#        - False if the command fails
#    ***********************************************************************************

import subprocess
def run_command(cmd: str) -> bool:
    """runs a command"""
    try:
        msg = subprocess.run(cmd, shell=True,check=True,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print(msg.stdout.decode())
        return True
    except subprocess.CalledProcessError as except_e:
        print(except_e.stderr.decode())
        return False

#    ***********************************************************************************
#	 Function Name: parseFile
#    Description: Attempts to open a file with the name of the passed
#       in argument, and parse it into a list of strings.
#  	 Params:
#	     - fileName: the name of the file you want to open and parse
#    Returns:
#		 - result, the newly created list

#    ***********************************************************************************
def parse_file(file_name: str) -> str:
    """parses a file"""
    result = ''
    with open(file_name, 'r', encoding="utf-8") as file:
        for line in file:
            for _ in line.split():
                result = ' '.join(line.split())
    return result

#	***********************************************************************************
#	Function Name: patchSuggestions
#	Description: Takes in a list of suggestions generated by
#   the Lynis report, and searches for them in the 
#	suggestions dictionary. If it is found, the corresponding
#    command is run to patch that vulnerability.
#	Params:
#	- report: A list of strings that is just the Lynis
#   report file parsed into a list of lines
#	Returns:
#		- void
#	***********************************************************************************
from commands.py import suggestionsDict
def patch_suggestions(report: List[str]) -> None:
    """patches suggestions"""
    for line in report:
        if line in suggestionsDict:
            success = run_command(suggestionsDict[line])
            if success:
                print("Command \'", suggestionsDict[line], "\' succeeded")
            else:
                print("Command \'", suggestionsDict[line], "\' failed")
def main():
    print("Welcome to the Lynis Security Vulnerability Patcher.")
    filePath = input("""Please enter the exact path of your latest Lynis security vulnerability 
 report. It should be located at /var/log/lynis-report.dat.....""")
    tempReport = parse_file(filePath)
    patch_suggestions(tempReport)


if __name__ == "__main__":
    main()
